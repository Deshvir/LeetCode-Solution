/**
* Consider all the leaves of a binary tree.  From left to right order, the values of those leaves form a leaf value sequence.
*           3
*         /   \
*        5      1
*      /  \    / \
*     6   2    9  8
*        / \
*       7   4
* For example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).

* Two binary trees are considered leaf-similar if their leaf value sequence is the same.

* Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.

* Note:

* Both of the given trees will have between 1 and 100 nodes.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
/*Solution: Using DFS*/ 
 
class Solution {
public:
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        vector<int> vec1;
        vector<int> vec2;
        helper(root1, vec1);
        helper(root2, vec2);
        if(vec1.size() != vec2.size()){
            return false;
        }else{
            for(int i = 0 ; i < vec1.size() ; i++){
                if(vec1[i] != vec2[i]){
                    return false;
                }
            }
        }
        return true;
    }


    void helper(TreeNode* root, vector<int> &vec){
        if(!root) return;
        if(!root->left && !root->right){
            vec.push_back(root->val);
        }
        helper(root->left, vec);
        helper(root->right, vec);
    }
};
