/**
* Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
* (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).
* You are given a target value to search. If found in the array return its index, otherwise return -1.
* You may assume no duplicate exists in the array.
* Your algorithm's runtime complexity must be in the order of O(log n).

* Example 1:
* Input: nums = [4,5,6,7,0,1,2], target = 0
* Output: 4

* Example 2:
* Input: nums = [4,5,6,7,0,1,2], target = 3
* Output: -1
*/


/** Solution Concept:
* 1. Find the index of minimum element in the array. Let it be mid;
* 2. Two conditions are possible.
*    (a) If target lies in the nums[0] and a[mid-1], then element lies in the first part of array before the minumim element.
*        Assign low index(l = 0) and  high index (h = num-1).
*    (b) If target lies does not lie in part a, then it lies in the second part. Assign low ( l = mid) and high (h = nums.size()-1).
* 3. Apply binary search on on the arrray with new low  and high index.
*/


class Solution {
public:
    int search(vector<int>& nums, int target) {
    //1.  find index of lowest element in the vector.
        if(nums.size() == 0) return -1;
        int l1=0;
        int h = nums.size()-1;
        while(l1<h){
            int mid = (l1+h)/2;
            if(nums[mid] > nums[h]){
                l1 = mid+1;
            }else{
                h = mid;
            }
        }
        
        //2. Check where does target element lies in part before the lowest element or in the part from lowest element to the end of array.
        int l2;
        if(target>=nums[0] && target<=nums[l1-1]){
            l2 = 0;
            h = l1-1;
        }else{
            l2 = l1;
            h = nums.size()-1;
        }

        // 3. Apply binary search algorithm
        while(l2 <= h){
            int mid = (l2+h)/2;
            if(nums[mid] == target){
                return mid;
            }
            if(nums[mid] < target){
                l2 = mid+1;
            }else{
                h = mid-1;
            }
        }
        return -1;
    }
};
