/**
* Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.

* Example 1:

* Input: ["abcw","baz","foo","bar","xtfn","abcdef"]
* Output: 16 
* Explanation: The two words can be "abcw", "xtfn".
* Example 2:

* Input: ["a","ab","abc","d","cd","bcd","abcd"]
* Output: 4 
* Explanation: The two words can be "ab", "cd".
* Example 3:

* Input: ["a","aa","aaa","aaaa"]
* Output: 0 
* Explanation: No such pair of words.
*/

class Solution {
public:
    int maxProduct(vector<string>& words) {
        int len = words.size();
        vector<int> s(len);
        //int s[len];   //will throw error on null input, so use vector
        int max_val = 0;
        for(int i = 0 ; i < len ; i++){
            for(char c:words[i]){
                s[i] = s[i] | (1<<c-'a');
            }
            for(int j = 0 ; j < i ; j++){
                if(!(s[j]&s[i])){
                    max_val = max(max_val, (int)(words[j].size() * words[i].size()));
                }
            }
        }
        return max_val;
    }
};
