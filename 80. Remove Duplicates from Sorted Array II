/**
* Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.
* Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

* Example 1:
* Given nums = [1,1,1,2,2,3],
* Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.
* It doesn't matter what you leave beyond the returned length.

* Example 2:
* Given nums = [0,0,1,1,1,1,2,3,3],
* Your function should return length = 7, with the first seven elements of nums being modified to 0, 0, 1, 1, 2, 3 and 3 respectively.
* It doesn't matter what values are set beyond the returned length.
* Clarification:

* Confused why the returned value is an integer but your answer is an array?
* Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.

* Internally you can think of this:
* // nums is passed in by reference. (i.e., without making a copy)
* int len = removeDuplicates(nums);

* // any modification to nums in your function would be known by the caller.
* // using the length returned by your function, it prints the first len elements.
* for (int i = 0; i < len; i++) {
*     print(nums[i]);
* }
*/

/*Concept: Count the same number. If count is more then 2 then keep on removing the same element until new element is found.
  Ex: [1,1,1,1,2,2,3]
  When count for 1 becomes more than 2, keep on removing the element till 2 is found.
  Ex: [1,1,1,1,1]
  inside while loop, if condiiton is added for this kind of case. Else it will throught run time error.
  This solution beats 100% solutions
*/

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int count = 1;
        for(int i = 1; i < nums.size() ; i++){
            if(nums[i] == nums[i-1]){
                if(count<2){
                    count++;
                }else{
                    while(nums[i] == nums[i-1]){
                        nums.erase(nums.begin()+i);  
                        if(i == nums.size()){
                            return nums.size();
                        }
                    }                    
                    count = 1;
                }
            }else{
                count = 1;
            }
        }
        return nums.size();
    }
};
