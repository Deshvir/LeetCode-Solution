/**
* There are N students in a class. Some of them are friends, while some are not. Their friendship is transitive in nature. For example,
* if A is a direct friend of B, and B is a direct friend of C, then A is an indirect friend of C. And we defined a friend circle is a 
* group of students who are direct or indirect friends.

* Given a N*N matrix M representing the friend relationship between students in the class. If M[i][j] = 1, then the ith and jth students
* are direct friends with each other, otherwise not. And you have to output the total number of friend circles among all the students.

* Example 1:
* Input: 
* [[1,1,0],
*  [1,1,0],
*  [0,0,1]]
* Output: 2
* Explanation:The 0th and 1st students are direct friends, so they are in a friend circle. 
* The 2nd student himself is in a friend circle. So return 2.
* Example 2:
* Input: 
* [[1,1,0],
*  [1,1,1],
*  [0,1,1]]
* Output: 1
* Explanation:The 0th and 1st students are direct friends, the 1st and 2nd students are direct friends, 
* so the 0th and 2nd students are indirect friends. All of them are in the same friend circle, so return 1.
* Note:
* N is in range [1,200].
* M[i][i] = 1 for all students.
* If M[i][j] = 1, then M[j][i] = 1.

*/

/*
Solution: 1. Convert matrix into adjacency list
          2. Keep the status of each node visited 
          3. Note: This problem is equivalent to finding number of connected components.  
*/

class Solution {
public:
    vector<int> adj[200];
    bool visited[200] = {false};
    
    void dfs(int s){
        visited[s] = true;
        for(int i = 0; i<adj[s].size() ; i++){
            if(visited[adj[s][i]]==false){
                dfs(adj[s][i]);
            }
        }
    }
    
    int findCircleNum(vector<vector<int>>& M) {
        for(int i = 0 ; i < M.size() ; i++){
            for(int j = 0 ; j < i ; j++){
                if((M[i][j] == 1) && (i!=j)){
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }
        int count = 0;
        for(int i = 0 ; i < M.size() ; i++){
            if(visited[i]==false){
                dfs(i);
                count++;
            }
        }
        return count;
    }
};


/*
Solution2: Using adjacency matrix
*/

class Solution {
public:
    
   void dfs(vector<vector<int>>& M, vector<bool> &visited, int i){
       visited[i] = true;
       for(int j = 0 ; j < M.size() ; j++){
           if(i!=j && (visited[j] == false) && (M[i][j] == 1)){
                dfs(M, visited, j);
           }
       }
   } 
    
   int findCircleNum(vector<vector<int>>& M) {
       vector<bool> visited(M.size(), false);
       int count = 0;
       for(int i = 0 ; i < M.size() ; i++){
           if(visited[i]==false){
               dfs(M, visited, i);
               count++;
           }
       }
       return count;
   }
};
