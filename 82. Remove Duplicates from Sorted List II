/*
* Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.

* Example 1:
* Input: 1->2->3->3->4->4->5
* Output: 1->2->5

* Example 2:
* Input: 1->1->1->2->3
* Output: 2->3
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        int duplicate; //to store the duplicate element for comparision
        ListNode *dummy = new ListNode(0);
        dummy->next = head;
        ListNode *cur = dummy;
        while(cur->next && cur->next->next){
            if(cur->next->val == cur->next->next->val){
                duplicate = cur->next->val;
                while(cur->next && cur->next->val == duplicate){
                    cur->next = cur->next->next;
                }
            }else{
                cur = cur->next;
            }
        }
        return dummy->next; // because original head might me replaced in example like [1,1,1,2,3]. We cannot return head;
    }
};


/*
Solution2: 
*/
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(!head) return NULL;
        if(head && !head->next) return head;
        ListNode* dummy = new ListNode(0);
        dummy->next = head;
        ListNode* pre = dummy;
        ListNode* then = head;
        while(then && then->next){
            if(then->val == then->next->val){
                while(then && then->next && (then->val == then->next->val)){
                    then = then->next;
                }
                if(then) then = then->next;
            }else if(then && then->next){
                pre->next = then;
                pre = then;
                then = then->next;
            }
            pre->next = then;      //this will take care of 2 types of conditions (1)like 1->2->3->3 where then will null at the end.
                                   //(2) like 1->2->2->3->3->4 here when then will reach at 4, this will connect the 1->4
        }
        return dummy->next;
    }
}
