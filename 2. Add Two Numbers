# You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

# You may assume the two numbers do not contain any leading zero, except the number 0 itself.

# Example

# Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
# Output: 7 -> 0 -> 8
# Explanation: 342 + 465 = 807.


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int carry = 0;
        ListNode* l3 = new ListNode(0); //for traversing
        ListNode* head = l3;  
        int temp;   //to strore actual value of l3 for carry 
        ListNode *prev;  //to store previous node
        l3->next=0;
        
        while(l1!=0 || l2!=0){
        
        //if both linked list have nodes
            if(l1!=NULL && l2!=NULL){
                l3->val = l1->val+l2->val+carry;    
                carry=0;
                if(l3->val>9){
                    temp = l3->val;
                    l3->val = l3->val%10;
                    carry = temp/10;
                }
                l1=l1->next;
                l2=l2->next;
           
           //if only first list is having element and second list is not having any element at corresponding position
            }else if(l1!=NULL && l2==NULL){
                l3->val = l1->val+carry;
                carry=0;
                if(l3->val>9){
                    temp = l3->val;
                    l3->val = l3->val%10;
                    carry = temp/10;
                }                
                l1=l1->next;
                
          //if only second list is having element and first list is not having any element at corresponding position
            }else if(l1==NULL && l2!=NULL){
                l3->val = l2->val+carry;
                carry=0;
                if(l3->val>9){
                    temp = l3->val;
                    l3->val = l3->val%10;
                    carry = temp/10;
                }
                l2=l2->next;
            }
            prev = l3;
            l3->next = new ListNode(0);
            l3 = l3->next;
            l3->next = 0;
        }
        
        // we are assigning one extra node at the end. It should be deleted if carry is 0 else value of carry should be put over there.
        if(carry>0){
            l3->val = carry;            
        }else{
            delete prev->next;
            prev->next = NULL;      
        }
        return head;
    }
};
