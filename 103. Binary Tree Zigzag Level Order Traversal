/*
* Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, 
* then right to left for the next level and alternate between).

* For example:
* Given binary tree [3,9,20,null,null,15,7],
*     3
*    / \
*   9  20
*     /  \
*    15   7
* return its zigzag level order traversal as:
* [
*   [3],
*   [20,9],
*   [15,7]
* ]
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
//Solution1: Using DFS

class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> vec;
        int level = 0;
        helper(vec, root, 0);
        for(int i = 1 ; i <vec.size() ; i+=2){
            reverse(vec[i].begin(), vec[i].end());
        }
        return vec;
    }
    
    void helper(vector<vector<int>> &vec, TreeNode* root, int level){
        if(!root) return;
        if(level >= vec.size())
            vec.push_back({});
        vec[level].push_back(root->val);
       
        helper(vec, root->left, level+1);
        helper(vec, root->right, level+1);
    }
};

//Solution2: Using BFS

class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        if(!root) return vector<vector<int>> ();
        vector<vector<int>> result;
        bool leftToRight = 1;
        queue<TreeNode*> nodeQ;
        nodeQ.push(root);
        
        while(!nodeQ.empty()){
            int size = nodeQ.size();
            vector<int> row(size);
            for(int i = 0 ; i < size ; i++){
                TreeNode* node = nodeQ.front();
                nodeQ.pop();
                int index = leftToRight?i:size-i-1;
                
                row[index] = node->val;
                if(node->left)
                    nodeQ.push(node->left);
                if(node->right)
                    nodeQ.push(node->right);
            }
            result.push_back(row);
            leftToRight =! leftToRight;
        }
        return result;
    }
};
