/**
* Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

* Example 1:
* Input:
* 11110
* 11010
* 11000
* 00000
* Output: 1

* Example 2:
* Input:
* 11000
* 11000
* 00100
* 00011
* Output: 3
*/

//Solution: Using DFS, this problem is similar to LeetCode 695. Maximum Area of Island. Similar concept from 695 is used
//          1. Calculate the area for each vertex. 
//          2. If area found is greater than 0, it means it's a new island because whenever any entry with '1' is found, it is
//             made 0 at the same time. So if '1' is available, it means it's a new island.

class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int maxIsland = 0;
        int result = 0;
        for(int i = 0 ; i < grid.size() ; i++){
            for(int j = 0 ; j < grid[0].size() ; j++){
                if(grid[i][j] == '1'){
                    maxIsland = helper(grid, i, j);
                    if(maxIsland != 0)
                        result += 1;
                }
            }
        }
        return result;
    }
    
    int helper(vector<vector<char>>& grid, int i, int j){
        if(i>=0 && i< grid.size() && j>=0 && j<grid[0].size() && grid[i][j] == '1'){
            grid[i][j] = '0';
            return 1 + helper(grid,i-1,j) + helper(grid,i+1,j)+ helper(grid,i,j-1)+ helper(grid,i,j+1);
        }
        return 0;
    }    
};
