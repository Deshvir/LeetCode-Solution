# Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.

# Example:
# Input:  [1,2,1,3,2,5]
# Output: [3,5]

# Note:
# The order of the result is not important. So in the above example, [5, 3] is also correct.
# Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?


class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        map<int, int> myMap;
        for(int i = 0 ; i < nums.size() ; i++){
            myMap[nums[i]] += 1;
        }
        
        vector <int> vec;
        map<int, int> :: iterator itr;

        for(itr = myMap.begin() ; itr!= myMap.end() ; itr++){
            if(itr->second == 1){
                vec.push_back(itr->first);
            }
        }
        return vec;
    }
};
