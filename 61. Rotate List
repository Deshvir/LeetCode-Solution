/*
* Given a linked list, rotate the list to the right by k places, where k is non-negative.

* Example 1:
* Input: 1->2->3->4->5->NULL, k = 2
* Output: 4->5->1->2->3->NULL
* Explanation:
* rotate 1 steps to the right: 5->1->2->3->4->NULL
* rotate 2 steps to the right: 4->5->1->2->3->NULL

* Example 2:
* Input: 0->1->2->NULL, k = 4
* Output: 2->0->1->NULL
* Explanation:
* rotate 1 steps to the right: 2->0->1->NULL
* rotate 2 steps to the right: 1->2->0->NULL
* rotate 3 steps to the right: 0->1->2->NULL
* rotate 4 steps to the right: 2->0->1->NULL
*/


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(!head) return 0;
        int len = 1;
        ListNode* tail, * new_head;
        tail = new_head = head; 
        while(tail->next){    // get number of nodes in the linkde list
            len++;
            tail = tail->next;
        }
        tail->next = head;  //connect last node to the head
        k %= len;
        for(int i = 0; i < len-k ; i++){  //new last node is (len-k)th node in the list
            tail = tail->next;
        }
        new_head = tail->next;  
        tail->next = NULL;
        return new_head;
    }
};
