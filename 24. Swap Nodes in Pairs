/**
* Given a linked list, swap every two adjacent nodes and return its head.

* Example:

* Given 1->2->3->4, you should return the list as 2->1->4->3.
* Note:

* Your algorithm should use only constant extra space.
* You may not modify the values in the list's nodes, only nodes itself may be changed.
*/


class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        ListNode *first = new ListNode(0);
        ListNode *second = new ListNode(0);
        ListNode *temp = new ListNode(0);
        second->next = head;
        while(second->next && second->next->next){
            first = second->next;
            second = second->next->next;
            temp->val = first->val;
            first->val = second->val;
            second->val = temp ->val;
        }
        return head;
    }
};
