/**
* Given a (singly) linked list with head node root, write a function to split the linked list into k consecutive linked list "parts".
* The length of each part should be as equal as possible: no two parts should have a size differing by more than 1. This may lead to 
* some parts being null.
* The parts should be in order of occurrence in the input list, and parts occurring earlier should always have a size greater than 
* or equal parts occurring later.

* Return a List of ListNode's representing the linked list parts that are formed.

* Examples 1->2->3->4, k = 5 // 5 equal parts [ [1], [2], [3], [4], null ]
* Example 1:
* Input: 
* root = [1, 2, 3], k = 5
* Output: [[1],[2],[3],[],[]]
* Explanation:
* The input and each element of the output are ListNodes, not arrays.
* For example, the input root has root.val = 1, root.next.val = 2, \root.next.next.val = 3, and root.next.next.next = null.
* The first element output[0] has output[0].val = 1, output[0].next = null.
* The last element output[4] is null, but it's string representation as a ListNode is [].

* Example 2:
* Input: 
* root = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3
* Output: [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]
* The input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.

* Note:
* The length of root will be in the range [0, 1000].
* Each value of a node in the input will be an integer in the range [0, 999].
* k will be an integer in the range [1, 50].
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
/* Solution: 4 ListNodes are used
  1. dummt: to calculate the number of elements in linked list
  2. new_cur: It points to the head of next new partions when one partion gets over.
  3. head: It points to the head of every new partions
  4. cur: used for traversal in the linked list.
  5. limit: shows the number of elements in each partition.
  6. rem: remainder, if greater than zero, one extra element is inserted in each partiotion till remainder becomes zero.
  */
 
class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* root, int k) {
        ListNode *new_cur = root;
        ListNode *head;
        ListNode *cur;
        ListNode* dummy = root;
        int count = 0;
        while(dummy){
            count++;
            dummy = dummy->next;
        }
        
        int limit = count/k;
        int rem = count%k;
        vector<ListNode*> vec;  
        
        for(int i = 0 ; i < k ; i++){
            head=new_cur;
            cur=new_cur;
            for(int j = 0 ; j < limit-1 ; j++)
                cur=cur->next;
            
            if(rem!=0 && limit>0){
                cur=cur->next;
                rem--;
            }
            
            if(cur){
                new_cur=cur->next;
                cur->next = NULL;
                vec.push_back(head);
            }else{
                vec.push_back(NULL);
            }
        }
        return vec;
    }
};
