/*

* You need to find the largest value in each row of a binary tree.

* Example:
* Input: 

*           1
*          / \
*         3   2
*        / \   \  
*       5   3   9 

* Output: [1, 3, 9]
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

//Solution: BFS using queue
 
class Solution {
public:
    vector<int> largestValues(TreeNode* root) {
        if(!root) return vector<int> ();
        queue<TreeNode*> nodeQ;
        nodeQ.push(root);
        vector<int> result;
        while(!nodeQ.empty()){
            int size = nodeQ.size();
            vector<int> row(size);
            for(int i = 0 ; i < size ; i++){
                TreeNode* node = nodeQ.front();
                nodeQ.pop();
                row[i] = node->val;
                if(node->left) nodeQ.push(node->left);
                if(node->right) nodeQ.push(node->right);
            }
            int max = INT_MIN;
            for(int i = 0; i < size ; i++){
                if(row[i] > max)
                    max = row[i];
            }
            result.push_back(max);
        }
        return result;
    }
};
