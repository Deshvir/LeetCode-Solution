/**

* Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you 
* can see ordered from top to bottom.

* Example:

* Input: [1,2,3,null,5,null,4]
* Output: [1, 3, 4]
* Explanation:

*    1            <---
*  /   \
* 2     3         <---
*  \     \
*   5     4       <---
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
//Solution: BFS using queue

class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        if(!root) return vector<int> ();
        vector<int> result;
        queue<TreeNode*> nodeQ;
        nodeQ.push(root);
        while(!nodeQ.empty()){
            int size = nodeQ.size();
            vector<int> row(size);
            for(int i = 0 ; i < size ;i++){
                TreeNode *node = nodeQ.front();
                nodeQ.pop();
                row[i] = node->val;
                if(node->left) nodeQ.push(node->left);
                if(node->right) nodeQ.push(node->right);
            }
            result.push_back(row[size-1]);
        }
        return result;
    }
};
