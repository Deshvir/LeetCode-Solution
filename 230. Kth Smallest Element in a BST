/**
* Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.
* Note: 
* You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

* Example 1:
* Input: root = [3,1,4,null,2], k = 1
*    3
*   / \
*  1   4
*   \
*    2
* Output: 1

* Example 2:
* Input: root = [5,3,6,2,4,null,null,1], k = 3
*        5
*       / \
*      3   6
*     / \
*    2   4
*   /
*  1
* Output: 3

* Follow up:
* What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? 
* How would you optimize the kthSmallest routine?
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
//Solution 1: Using inorder traversal and putting values in vector.

class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        vector<int> vec;
        helper(root, vec);
        return vec[k-1];
    }
    void helper(TreeNode* root, vector<int>& vec){
        if(root){
            helper(root->left, vec);
            vec.push_back(root->val);
            helper(root->right, vec);
        }
    }
};


//Solution 2: Iterative method using stack
class Solution {
public:   
   int kthSmallest(TreeNode* root, int k) {
        stack<TreeNode*> st;
        TreeNode *num;
        while(root || !st.empty()){
            while(root){
                st.push(root);
                root = root->left;
            }            
            root = st.top();
            if(--k == 0){           
                return root->val;
            }
            st.pop();
            root = root->right;
        }
    } 
}
