# Given two arrays, write a function to compute their intersection.

# Example:
# Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].

# Note:
# Each element in the result must be unique.
# The result can be in any order.


class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {

        unordered_set<int> mySet1;  //to store the elements from nums1
        unordered_set<int> mySet2;  //to store the elements from mums2 which are also present in nums1
        for(int i = 0 ; i < nums1.size() ; i++){
            mySet1.insert(nums1[i]);
        }
        
        for(int  j = 0 ; j < nums2.size() ; j++){
            if(mySet1.find(nums2[j]) != mySet1.end()){
                mySet2.insert(nums2[j]);
            }
        }
        vector <int> vec(mySet2.begin(), mySet2.end()); //store elements from mySet2 to vector 
        return vec;
    }
};

//2nd solution

class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        unordered_set<int> m(nums1.begin(), nums1.end());
        vector<int> res;
        for (auto a : nums2)
            if (m.count(a)) {
                res.push_back(a);
                m.erase(a);
            }
        return res;
    }
};
