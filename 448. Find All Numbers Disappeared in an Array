# Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.
# Find all the elements of [1, n] inclusive that do not appear in this array.
# Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.

# Example:

# Input:
# [4,3,2,7,8,2,3,1]

# Output:
# [5,6]


class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        int len = nums.size();
        int arr[len+1] = {0};
        vector <int> vec;
        for(int i = 0 ; i < len ; i++){
            arr[nums[i]] += 1;
        }
        
        for(int i = 1 ; i <= len ; i++){
            if(arr[i] == 0)
                vec.push_back(i);
        }
        return vec;
    }
};
