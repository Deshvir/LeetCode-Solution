/**
* Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.

* You need to help them find out their common interest with the least list index sum. If there is a choice tie between answers, output
* all of them with no order requirement. You could assume there always exists an answer.

* Example 1:
* Input:
* ["Shogun", "Tapioca Express", "Burger King", "KFC"]
* ["Piatti", "The Grill at Torrey Pines", "Hungry Hunter Steakhouse", "Shogun"]
* Output: ["Shogun"]
* Explanation: The only restaurant they both like is "Shogun".

* Example 2:
* Input:
* ["Shogun", "Tapioca Express", "Burger King", "KFC"]
* ["KFC", "Shogun", "Burger King"]
* Output: ["Shogun"]
* Explanation: The restaurant they both like and have the least index sum is "Shogun" with index sum 1 (0+1).

* Note:
* The length of both lists will be in the range of [1, 1000].
* The length of strings in both lists will be in the range of [1, 30].
* The index is starting from 0 to the list length minus 1.
* No duplicates in both lists.
*/

/* Solution 1: Search each element O(n2) time complexity */

class Solution {
public:
    vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) {
        int min = 2000;
        vector<string> vec;
        for(int i = 0 ; i < list1.size() ; i++){
            for(int j = 0 ; j < list2.size() ; j++){
                if(list1[i] == list2[j]){
                    if(min > (i+j)){
                        min = i+j;
                        vec.clear();
                        vec.push_back(list1[i]);
                    }else if(min == (i+j)){
                        vec.push_back(list1[i]);
                    }
                }
            }
        }
        return vec;
    }
};


/* Solution 2: Using unordered map  */

class Solution {
public:
    vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) {
        unordered_map<string, int> map_list2;
        for(auto i = 0 ; i < list2.size() ; i++){
            map_list2[list2[i]] = i;
        }
        
        unordered_map<string, int> index_sum;
        auto min_index = std::numeric_limits<int>::max();
        
        for(auto i = 0 ; i < list1.size() ; i++){
            auto ret = list1[i];
            if(map_list2.find(ret) != map_list2.end()){
                index_sum[ret] = map_list2[ret]+i;
                min_index = min(min_index, map_list2[ret]+i);
            }
        }
        vector<string> vec;
        for(auto ret : index_sum){
            if(ret.second == min_index){
                vec.push_back(ret.first);
            }
        }
        return vec;
    }
};
