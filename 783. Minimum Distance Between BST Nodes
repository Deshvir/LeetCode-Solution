/**
* Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two 
* different nodes in the tree.

* Example :

* Input: root = [4,2,6,1,3,null,null]
* Output: 1
* Explanation:
* Note that root is a TreeNode object, not an array.

* The given tree [4,2,6,1,3,null,null] is represented by the following diagram:

*           4
*         /   \
*       2      6
*      / \    
*     1   3  

* while the minimum difference in this tree is 1, it occurs between node 1 and node 2, also between node 3 and node 2.

* Note:
* The size of the BST will be between 2 and 100.
* The BST is always valid, each node's value is an integer, and each node's value is different.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
//Method1: Store the values in a vector while doing inorder traversal, and then keep on subtracting the adjacent values in the vector 
//to get the minimum distance.

class Solution {
public:
    int minDiffInBST(TreeNode* root) {
        vector<int> vec;
        pushVector(root, vec);
        int diff = vec[1] - vec[0];
        for(int i = 1 ; i < vec.size() ; i++){
            diff = min(diff, vec[i]-vec[i-1]);
        }
        return diff;
    }
    
    void pushVector(TreeNode* root, vector<int> &vec_val){
        if(root == NULL) return;
        pushVector(root->left, vec_val);
        vec_val.push_back(root->val);
        pushVector(root->right, vec_val);
    }
};  

