/**
* Given a set of distinct integers, nums, return all possible subsets (the power set).

* Note: The solution set must not contain duplicate subsets.

* Example:

* Input: nums = [1,2,3]
* Output:
* [
*   [3],
*   [1],
*   [2],
*   [1,2,3],
*   [1,3],
*   [2,3],
*   [1,2],
*   []
* ]
*/

/*Solution: Using backtracking*/

class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> vec;
        vector<int> vecin;
        int index = 0;
        vec.push_back(vecin);
        helper(vec,vecin,index,nums);
        return vec;
    }
    
    void helper(vector<vector<int>> &vec, vector<int> &vecin, int index, vector<int> &nums){
        for(int i = index; i < nums.size() ; i++){
            vecin.push_back(nums[i]);
            vec.push_back(vecin);
            helper(vec,vecin,i+1,nums);
            vecin.pop_back();
        }
        return;
    }
};
