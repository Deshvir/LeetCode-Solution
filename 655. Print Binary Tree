/**
* Print a binary tree in an m*n 2D string array following these rules:

* The row number m should be equal to the height of the given binary tree.
* The column number n should always be an odd number.
* The root node's value (in string format) should be put in the exactly middle of the first row it can be put. The column and 
* the row where the root node belongs will separate the rest space into two parts (left-bottom part and right-bottom part). You 
* should print the left subtree in the left-bottom part and print the right subtree in the right-bottom part. The left-bottom part
* and the right-bottom part should have the same size. Even if one subtree is none while the other is not, you don't need to print
* anything for the none subtree but still need to leave the space as large as that for the other subtree. However, if two subtrees 
* are none, then you don't need to leave space for both of them.
* Each unused space should contain an empty string "".
*
* Print the subtrees following the same rules.
* Example 1:
* Input:
*      1
*     /
*    2
* Output:
* [["", "1", ""],
*  ["2", "", ""]]
* Example 2:
* Input:
*      1
*     / \
*    2   3
*     \
*      4
* Output:
* [["", "", "", "1", "", "", ""],
*  ["", "2", "", "", "", "3", ""],
*  ["", "", "4", "", "", "", ""]]
* Example 3:
* Input:
*       1
*      / \
*     2   5
*    / 
*   3 
*  / 
* 4 
* Output:

* [["",  "",  "", "",  "", "", "", "1", "",  "",  "",  "",  "", "", ""]
*  ["",  "",  "", "2", "", "", "", "",  "",  "",  "",  "5", "", "", ""]
*  ["",  "3", "", "",  "", "", "", "",  "",  "",  "",  "",  "", "", ""]
*  ["4", "",  "", "",  "", "", "", "",  "",  "",  "",  "",  "", "", ""]]
*/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
/*
* Solution: Find height of tree which is equivalent to number of rows in vector. Then find the number of columns in vector by
* formulas 2^height-1 which is equivalent to number of columns in vector. 
* 
* Then call dfs and apply BST and put the values in vector. Repeat this step recursively. 
*/

class Solution {
public:
    vector<vector<string>> printTree(TreeNode* root) {
        int height = findHeight(root);
        int width = pow(2, height)-1;
        vector<vector<string>> vec(height, vector<string>(width,""));
        dfs(root, vec, 0, width-1, 0);
        return vec;
    }
    
    int findHeight(TreeNode* root){
        if(!root) return 0;
        return max(findHeight(root->left), findHeight(root->right)) + 1;
    }
    
    void dfs(TreeNode* root, vector<vector<string>> &vec, int l, int r, int height){
        if(!root || l>r) return;
        int mid = l+(r-l)/2;
        vec[height][mid] = to_string(root->val);
        dfs(root->left, vec, l, mid-1, height+1);
        dfs(root->right, vec, mid+1, r, height+1);
    }
};
