# Given a binary array, find the maximum number of consecutive 1s in this array.

# Example 1:
# Input: [1,1,0,1,1,1]
# Output: 3
# Explanation: The first two digits or the last three digits are consecutive 1s.
#     The maximum number of consecutive 1s is 3.

# Note:
# The input array will only contain 0 and 1.
# The length of input array is a positive integer and will not exceed 10,000


//Solution1: Brute force
class Solution {
public:
    int findMaxConsecutiveOnes(vector<int>& nums) {
        int max = 0;
        int count = 0;
        int len = nums.size();
        for(int i = 0 ; i< len ; i++){
            if(nums[i] == 1){
                if(nums[i] == nums[i+1]){
                    count++;
                }else{
                    count++;
                    max = max>count?max:count;
                    count = 0;
                }
            }
        }
        return max;
    }
};

//Solution 2
class Solution {
public:
    int findMaxConsecutiveOnes(vector<int>& nums) {
        int max_count = 0;
        int count = 0;
        for(int  i = 0 ; i < nums.size(); i++){
            if( nums[i] == 1)
                max_count = (max_count > ++count)?max_count:count;
            else
                count = 0;
        }
        return max_count;
    }
 };
 
 
//Solution3 : Using auto
 class Solution {
public:
    int findMaxConsecutiveOnes(vector<int>& nums) {
        int max_count = 0;
        int count = 0;
        for(auto n : nums){
            if( n == 1)
                max_count = (max_count > ++count)?max_count:count;
            else
                count = 0;
        }
        return max_count;
    }
 };
