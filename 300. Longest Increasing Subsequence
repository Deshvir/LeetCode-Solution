/**
* Given an unsorted array of integers, find the length of longest increasing subsequence.

* Example:
* Input: [10,9,2,5,3,7,101,18]
* Output: 4 
* Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 

* Note:
* There may be more than one LIS combination, it is only necessary for you to return the length.
* Your algorithm should run in O(n2) complexity.
* Follow up: Could you improve it to O(n log n) time complexity?
*/

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        if(nums.size() == 0) return 0;
        int len = nums.size();
        int lis[len];
        for(int i = 0 ; i < len ; i++){
            lis[i] = 1;
        }
        for(int i = 1 ; i < len ; i++){
            for(int j = 0 ; j < i ; j++){
                if(nums[i] > nums[j] && lis[i] < lis[j] + 1){
                    lis[i] = lis[j] + 1;
                }                
            }
        }
        int max = 1;
        for(int i = 0 ; i < len ; i++){
            if(max < lis[i]){
                max = lis[i];
            }
        }
        return max;
    }
};



/*
Solution: Same as above but with much shorter code
          O(n^2) time complexity
*/

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        if(nums.size() == 1) return 1;
        vector<int> sub (nums.size(), 1);
        int maxVal = 0;
        int tail = 0;
        for(int i = 1 ; i < nums.size() ; i++){
            for(int j = tail ; j < i ; j++){
                if(nums[j]<nums[i] && sub[j]+1>sub[i]){
                    sub[i] = sub[j]+1;
                    tail = i;
                }
            }
            if(maxVal < sub[i]){
                maxVal = sub[i];
            }
        }
        return maxVal;
    }
};
