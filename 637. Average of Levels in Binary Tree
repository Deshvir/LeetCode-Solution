/**
* Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.
* Example 1:
* Input:
*     3
*    / \
*   9  20
*     /  \
*    15   7
* Output: [3, 14.5, 11]
* Explanation:
* The average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].
* Note:
* The range of node's value is in the range of 32-bit signed integer
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
//Solution : BFS using queue 

class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {
        vector<double> result;
        queue<TreeNode*> nodeQ;
        nodeQ.push(root);
        while(!nodeQ.empty()){
            int size = nodeQ.size();
            vector<double> row(size);
            for(int i = 0 ; i < size ; i++){
                TreeNode* node = nodeQ.front();
                nodeQ.pop();
                row[i] = node->val; 
                if(node->left) nodeQ.push(node->left);
                if(node->right) nodeQ.push(node->right);
            }
            double sum = 0;
            int i = 0;
            while(i<size){
                sum+=row[i];
                i++;
            }
            result.push_back(sum/size);
        }
        return result;
    }
};
