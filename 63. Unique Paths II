/**
* A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).
* The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the 
* grid (marked 'Finish' in the diagram below).

* Now consider if some obstacles are added to the grids. How many unique paths would there be?

* An obstacle and empty space is marked as 1 and 0 respectively in the grid.

* Note: m and n will be at most 100.

* Example 1:

* Input:
* [
*   [0,0,0],
*   [0,1,0],
*   [0,0,0]
* ]
* Output: 2
* Explanation:
* There is one obstacle in the middle of the 3x3 grid above.
* There are two ways to reach the bottom-right corner:
* 1. Right -> Right -> Down -> Down
* 2. Down -> Down -> Right -> Right
*/

/*Solution 1: Using 2D array of size m+1, n+1 where m, n are dimenstions of given array. This solution is accepted
* but not the optimised solution. It can be solved with 1-D array as well as mentioned in solution 2.

*/

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        if(obstacleGrid[m-1][n-1] == 1) return 0;
        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        
        for(int row = 1 ; row < m+1 ; row++){
            for(int col = 1 ; col < n+1 ; col++){
                dp[row][col] = obstacleGrid[row-1][col-1];
            }
        }
        dp[1][0] = -1;
        for(int i = 1 ; i <= m ; i++){
            for(int j = 1 ; j <= n ; j++){
                if(dp[i][j] == 1) continue;
                if(dp[i-1][j] != 1 && dp[i][j-1] != 1)
                    dp[i][j] = dp[i-1][j] + dp[i][j-1];
                else if(dp[i-1][j] != 1 && dp[i][j-1] == 1)
                    dp[i][j] = dp[i-1][j];
                else if(dp[i-1][j] == 1 && dp[i][j-1] != 1)
                    dp[i][j] = dp[i][j-1];
            }
        }
        return (-1)*dp[m][n];
    }
};

/*
Solution 2: Optimised solution with 1-D array 

*/

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid[0].size();
        vector<int> dp(m,0);
        dp[0] = 1;
        for(int row = 0; row < obstacleGrid.size() ; row++){
            for(int col = 0 ; col < obstacleGrid[0].size() ; col++){
                if(obstacleGrid[row][col] == 1)
                    dp[col] = 0;
                else if(col > 0)
                    dp[col]+=dp[col-1];
            }
        }
        return dp[m-1];
    }
};
