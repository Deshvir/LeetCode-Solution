/**
* Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.
* Calling next() will return the next smallest number in the BST.
* Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.
*/

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
 //Solution 1: Using vector //O(1) time and O(n) space
 
class BSTIterator {
public:
    BSTIterator(TreeNode *root) {
        helper(root);
    }
    /pre order implementation in helper funtion
    void helper(TreeNode *root){
        if(root){       
            helper(root->left);
            vec.push_back(root);      
            helper(root->right);
        }
    }

    /** @return whether we have a next smallest number */
    bool hasNext() {
        count++;
        return (count <= vec.size())?true:false;
    }

    /** @return the next smallest number */
    int next() {
        return vec[count-1]->val; 
    }
    
private:
    vector <TreeNode*> vec;
    int count = 0;
};

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = BSTIterator(root);
 * while (i.hasNext()) cout << i.next();
 */
 
 
//Solution2: Using stack //O(1) time and O(n) space
// Use post order traversal while using stack because then only leftmost element will come on top;

class BSTIterator {
public:
    BSTIterator(TreeNode *root) {
        helper(root);
    }
    //post order implementation in helper funtion
    void helper(TreeNode *root){
        if(root){       
            helper(root->right);
            st.push(root);      
            helper(root->left);
        }
    }

    /** @return whether we have a next smallest number */
    bool hasNext() {
         return !st.empty();
    }

    /** @return the next smallest number */
    int next() {
        int result = st.top()->val;
        st.pop();
        return result; 
    }
    
private:
    stack <TreeNode*> st;
    int count = 0;
};


//Method 3 Using stack O(1) time and O(h) space
class BSTIterator {
public:
    BSTIterator(TreeNode *root) {
        helper(root);
    }
    
    void helper(TreeNode *root){
        if(root){    
            st.push(root);
            helper(root->left);
            cout<<"root "<<root->val<<"\n";
        }
    }

    /** @return whether we have a next smallest number */
    bool hasNext() {
        return !st.empty();
    }

    /** @return the next smallest number */
    int next() {
        TreeNode* result = st.top();
        st.pop();
        helper(result->right);
        return result->val; 
    }
    
private:
    stack <TreeNode*> st;
    int count = 0;
};

