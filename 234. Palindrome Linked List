# Given a singly linked list, determine if it is a palindrome.

# Example 1:

# Input: 1->2
# Output: false
# Example 2:

# Input: 1->2->2->1
# Output: true

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        int count = 0;
        ListNode *temp = head;
        //count number of elements
        while(temp!= NULL){
            count++;
            temp = temp->next;
        }
       
        ListNode* current = head;
        int toskip = count/2+count%2;
        //traverse till the middle of linked list. Aim is to reverse last half of linked list
        for(int i = 0 ; i < toskip ; i++){
            current = current->next;
        }
        
        //reverse linked list
        ListNode *previous = NULL;
        ListNode *nex = NULL;        
        while(current!=NULL){
            nex=current->next;
            current->next=previous;
            previous = current;
            current = nex;
        }
        
        //check for palindrome condition
        int j = 0;
        while(j<count/2){
            if(head->val == previous->val){
                head = head->next;
                previous = previous->next;
                j++;
            }else{
                return false;
            }
        }
        return true;
    }
};
