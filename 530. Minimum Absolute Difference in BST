/**
* Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.
* Example:
* Input:

*    1
*     \
*      3
*     /
*    2

* Output:
* 1

* Explanation:
* The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).
* Note: There are at least two nodes in this BST.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
//Method1: Using vector and inorder traversal. 
class Solution {
public:
    int getMinimumDifference(TreeNode* root) {
        vector<TreeNode*> vec;
        helper(root, vec);
        int diff = INT_MAX;
        for(int i = 1 ; i < vec.size() ; i++){
            diff = min(diff, abs(vec[i]->val-vec[i-1]->val));
        }
        return diff;
    }
    void helper(TreeNode* root, vector<TreeNode*> &vec){
        if(root){
            helper(root->left, vec);
            vec.push_back(root);
            helper(root->right, vec);
        }
    }
};
