/**
* A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).
* The robot can only move either down or right at any point in time. The robot is trying to reach
* the bottom-right corner of the grid (marked 'Finish' in the diagram below).
* How many possible unique paths are there?

* Note: m and n will be at most 100.
* Example 1:
* Input: m = 3, n = 2
* Output: 3
* Explanation:
* From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
* 1. Right -> Right -> Down
* 2. Right -> Down -> Right
* 3. Down -> Right -> Right

* Example 2:
* Input: m = 7, n = 3
* Output: 28
*/

// Detailed explaination can be obtained at below link
// https://leetcode.com/problems/unique-paths/discuss/22954/0ms-5-lines-DP-Solution-in-C++-with-Explanations
// Solution 1: This requires O(nm) time and O(m*n) space. 

class Solution {
public:
    int uniquePaths(int m, int n) {
        if(m == 1 && n == 1) return 1;
        int vec[m][n];
        vec[0][0] = 0;
        for(int i = 1 ; i < n ; i++){
            vec[0][i] = 1;
        }
        for(int i = 1 ; i < m ; i++){
            vec[i][0] = 1;
        }
        for(int i = 1 ; i < m ; i++){
            for(int j = 1; j < n ; j++){
                vec[i][j] = (vec[i-1][j] + vec[i][j-1]);
            }
        }
        return vec[m-1][n-1];
    }
};


// Solution 2: with O(1) space and O(n) time complexity

class Solution {
    int uniquePaths(int m, int n) {
        if (m > n) return uniquePaths(n, m);
        vector<int> cur(m, 1);
        for (int j = 1; j < n; j++)
            for (int i = 1; i < m; i++)
                cur[i] += cur[i - 1]; 
        return cur[m - 1];
    }
}; 

