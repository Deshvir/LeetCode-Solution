/**
* Given the root of a tree, you are asked to find the most frequent subtree sum. The subtree sum of a node is defined as the sum of all 
* the node values formed by the subtree rooted at that node (including the node itself). So what is the most frequent subtree sum value?
* If there is a tie, return all the values with the highest frequency in any order.

* Examples 1
* Input:

*   5
*  /  \
* 2   -3
* return [2, -3, 4], since all the values happen only once, return all of them in any order.
* Examples 2
* Input:

*   5
*  /  \
* 2   -5
* return [2], since 2 happens twice, however -5 only occur once.
* Note: You may assume the sum of values in any subtree is in the range of 32-bit signed integer.
*/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

/*
Solution1: Using map and vector(Uses different for loops for finding max_val and storing in vector)
*/

class Solution {
public:
    vector<int> findFrequentTreeSum(TreeNode* root) {
        int sum = 0;
        vector<int> vec;
        unordered_map<int, int> map;
        int max_val = 0;
        dfs(root, map);
        for(auto ret : map){
            if(ret.second > max_val){
                max_val = ret.second;
            }
        }
        for(auto ret : map){
            if(ret.second == max_val){
                vec.push_back(ret.first);
            }
        }
        return vec;
    }
    
    int dfs(TreeNode* root, unordered_map<int, int>& map){
        if(!root) return 0;
        
        int left = dfs(root->left, map);
        int right = dfs(root->right, map);
        map[left+right+root->val]+=1;
        return left+right+root->val;
    }
};


/*
Solution2: Using map and vector(Uses same for loop to update vector)
*/
class Solution {
public:
    vector<int> findFrequentTreeSum(TreeNode* root) {
        int sum = 0;
        vector<int> vec;
        unordered_map<int, int> map;
        int max_val = 0;
        dfs(root, map);
        for(auto ret : map){
            if(ret.second > max_val){
                vec = {ret.first};
                max_val = ret.second;
            }else if(ret.second == max_val){
                vec.push_back(ret.first);
            }
        }
        return vec;
    }
    
    int dfs(TreeNode* root, unordered_map<int, int>& map){
        if(!root) return 0;
        
        int left = dfs(root->left, map);
        int right = dfs(root->right, map);
        map[left+right+root->val]+=1;
        return left+right+root->val;
    }
};

/*
Solution3: Using map and vector(Simulataneous comparision for max count)
*/

class Solution {
public:
    vector<int> findFrequentTreeSum(TreeNode* root) {
        int sum = 0;
        vector<int> vec;
        unordered_map<int, int> map;
        int max_val = 0;
        dfs(root, map, max_val);
        for(auto ret : map){
            if(ret.second == max_val){
                vec.push_back(ret.first);
            }
        }
        return vec;
    }
    
    int dfs(TreeNode* root, unordered_map<int, int>& map, int &max_val){
        if(!root) return 0;
        
        int left = dfs(root->left, map, max_val);
        int right = dfs(root->right, map, max_val);
        max_val = max(max_val, map[left+right+root->val]+=1);
        return left+right+root->val;
    }
};
