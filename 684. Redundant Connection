/**
* In this problem, a tree is an undirected graph that is connected and has no cycles.

* The given input is a graph that started as a tree with N nodes (with distinct values 1, 2, ..., N), with one additional edge added. 
* The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.

* The resulting graph is given as a 2D-array of edges. Each element of edges is a pair [u, v] with u < v, that represents an undirected 
* edge connecting nodes u and v.

* Return an edge that can be removed so that the resulting graph is a tree of N nodes. If there are multiple answers, return the answer
* that occurs last in the given 2D-array. The answer edge [u, v] should be in the same format, with u < v.

* Example 1:
* Input: [[1,2], [1,3], [2,3]]
* Output: [2,3]
* Explanation: The given undirected graph will be like this:
*   1
*  / \
* 2 - 3
* Example 2:
* Input: [[1,2], [2,3], [3,4], [1,4], [1,5]]
* Output: [1,4]
* Explanation: The given undirected graph will be like this:
* 5 - 1 - 2
*     |   |
*     4 - 3
* Note:
* The size of the input 2D-array will be between 3 and 1000.
* Every integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.
*/

/*
Solution: Complexity will be O(n) becuase of all the nodes form a linked list by union;
*/

class Solution {
public:
    
    int find(int x, vector<int>& parent){
        while(x!=parent[x])
            x=parent[x];
        return x;
    }
       
    void join(vector<int>& parent, int x, int y){
        if(find(x,parent)!=find(y,parent))
            parent[y]=x;
    }
    
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        vector<int> parent(edges.size()+1);
        for(int i = 0 ; i <= edges.size() ; i++) parent[i]=i;   // parent should be different initially;
        vector<vector<int>> result;
        for(int i = 0 ; i < edges.size() ; i++){
            int x = find(edges[i][0], parent);
            int y = find(edges[i][1], parent);
            if(x==y){
                result.push_back(edges[i]);
            }else{
                join(parent,x,y);    
            }            
        }
        return result[result.size()-1];
    }
};


/*
Solution2: If we use union by rank, complexity will be O(log(n)) becuase nodes are flattend;
*/

class Solution {
public:
    
    int find(int x, vector<int>& parent){
        while(x!=parent[x])
            x=parent[x];
        return x;
    }
       
    void join(vector<int>& parent, int x, int y){
        if(find(x,parent)!=find(y,parent))
            parent[y]=x;
    }
    
    void union_by_rank(vector<int>& parent, vector<int>&rank, int x, int y){
        int a = find(x, parent);
        int b = find(y, parent);
        if(a == b) return;    // this will show cycle
        if(rank[a]>rank[b])
            parent[y] = a;
        else if(rank[a]<rank[b])
            parent[x] = b;
        else{
            parent[y] = x;    // this case will occur only for first time call to union_by_rank 
            rank[x]++;
        }    
    }
    
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        vector<int> parent(edges.size()+1);
        for(int i = 0 ; i <= edges.size() ; i++) parent[i]=i;   // parent should be different initially;
        vector<int> rank(edges.size()+1, 0);    // only required if we are using union by rank
        vector<vector<int>> result;
        for(int i = 0 ; i < edges.size() ; i++){
            int x = find(edges[i][0], parent);
            int y = find(edges[i][1], parent);
            if(x==y){
                result.push_back(edges[i]);
            }else{
                //join(parent,x,y);
                union_by_rank(parent, rank, x, y);
            }            
        }
        return result[result.size()-1];
    }
};
