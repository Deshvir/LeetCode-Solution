/* 
  * In a given integer array nums, there is always exactly one largest element.
  * Find whether the largest element in the array is at least twice as much as every other number in the array.
  * If it is, return the index of the largest element, otherwise return -1.

  * Example 1:
  * Input: nums = [3, 6, 1, 0]
  * Output: 1
  * Explanation: 6 is the largest integer, and for every other number in the array x,
  * 6 is more than twice as big as x.  The index of value 6 is 1, so we return 1.
 
  * Example 2:
  * Input: nums = [1, 2, 3, 4]
  * Output: -1
  * Explanation: 4 isn't at least as big as twice the value of 3, so we return -1.

  * Note:
  * nums will have a length in the range [1, 50].
  * Every nums[i] will be an integer in the range [0, 99].
  */

//Solution 1: Uses sort function

class Solution {
public:
    int dominantIndex(vector<int>& nums) {
        int max = 0, index, len = nums.size();
        for(int i = 0; i < len ; i++){
            if(nums[i] > max){
                max = nums[i];
                index = i;
            }
        }
        sort(nums.begin(), nums.begin() + nums.size());
        if(nums[len-1]>= 2 * nums[len-2]) 
            return index;
        return -1;
    }
};

//Solution 2: Without using sorting
class Solution {
public:
    int dominantIndex(vector<int>& nums) {        
        int maxOne = 0, maxTwo = 0, index = 0;
        for(int i = 0 ; i < nums.size() ; i++){
            if(maxOne < nums[i]){
                maxTwo = maxOne;
                maxOne = nums[i];
                index = i;
            }else if(maxTwo < nums[i]){
                maxTwo = nums[i];
            }
        }
        return (maxOne >= 2*maxTwo)? index : -1;
    }
};


