# Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.

# This is case sensitive, for example "Aa" is not considered a palindrome here.

# Note:
# Assume the length of given string will not exceed 1,010.

# Example:

# Input:
# "abccccdd"
# Output:
# 7

# Explanation:
# One longest palindrome that can be built is "dccaccd", whose length is 7.


class Solution {
public:
    int longestPalindrome(string s) {
        
//Solution 1: beat 18 %
        
        unordered_set<char> mySet;
        int count = 0;
        map <char,int>:: iterator itr;
        for(int i = 0 ; i < s.size() ; i++){
            if(mySet.find(s[i]) != mySet.end()){
                mySet.erase(s[i]);
                count++;
            }else{
                mySet.insert(s[i]);
            }    
        }
        if(count*2 == s.length()) 
            return count*2;
        return (count*2 +1);

        
//Solution 2: Beat 98.02 %
        
        int lower[26] = {0};
        int upper[26] = {0};
        for(int i = 0 ; i < s.length() ; i++){
            if(s[i] >= 97)
                lower[s[i] - 'a']++;
            else
                upper[s[i] - 'A']++;
        }
        
        int count = 0;
        for(int i = 0 ; i < 26 ; i++){
            count += (lower[i]/2)*2;
            count += (upper[i]/2)*2;
        }
        return (count == s.length())? count:count+1;
    }
};
