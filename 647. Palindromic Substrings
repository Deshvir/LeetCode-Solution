/**
* Given a string, your task is to count how many palindromic substrings in this string.

* The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.

* Example 1:
* Input: "abc"
* Output: 3
* Explanation: Three palindromic strings: "a", "b", "c".

* Example 2:
* Input: "aaa"
* Output: 6
* Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".

* Note:
* The input string length won't exceed 1000.
*/

/*Solution: Same idea as used in "5. Longest Palindromic Substring" using DP.*/


class Solution {
public:
    int countSubstrings(string s) {
        int len = s.length();
        if(len == 1){
            return 1;
        }
        int count = 0;
        vector<vector<bool>> vec(len, vector<bool>(len,0));
        for(int i = 0; i < len ; i++){
            vec[i][i] = 1;
            count++;
        }
        
        for(int i = 0 ; i < len-1 ; i++){
            if(s[i] == s[i+1]){
                vec[i][i+1] = 1;
                count++;
            }
        }
        
        for(int k = 3 ; k <= len ; k++){
            for(int i = 0 ; i < len-k+1 ; i++){
                int j = i+k-1;
                if(vec[i+1][j-1] && (s[i] == s[j])){
                    vec[i][j] = 1;
                    count++;
                }
            }
        }
        return count;
    }
};
