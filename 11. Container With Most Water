/**
* Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines 
* are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis 
* forms a container, such that the container contains the most water.

* Note: You may not slant the container and n is at least 2.
*/

class Solution {
public:
    int maxArea(vector<int>& height) {
       
        //Solution 1: Brute Force: takes around 600ms
        
        // int max_val = 0, area = 0;
        // for(int i = 1 ; i <= height.size() ; i++){
        //     for(int j = i+1 ; j <= height.size() ; j++){
        //         if(max_val < (min(height[i-1],height[j-1]) * (j-i))){
        //             max_val = min(height[i-1],height[j-1]) * (j-i);
        //         }
        //     }
        // }
        // return max_val;
        
        //Solution 2: takes around 12 ms
        //Start by evaluating the widest container, using the first and the last line. All other possible containers are
        //less wide, so to hold more water, they need to be higher. Thus, after evaluating that widest container, skip lines
        //at both ends that don't support a higher height. Then evaluate that new container we arrived at. Repeat until 
        //there are no more possible containers left.
        
        int l = 0;
        int r = height.size()-1;
        int max_val = 0;
        while(l<r){
            int h = min(height[l], height[r]);
            max_val = max(max_val, h * (r-l));
            while(height[l] <= h) l++;
            while(height[r] <= h) r--;
        }
        return max_val;
    }
};
