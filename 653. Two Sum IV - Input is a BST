/*
* Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that their sum 
* is equal to the given target.

* Example 1:
* Input: 
*     5
*    / \
*   3   6
*  / \   \
* 2   4   7

* Target = 9

* Output: True
* Example 2:
* Input: 
*     5
*    / \
*   3   6
*  / \   \
* 2   4   7

* Target = 28

* Output: False
*/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

/*
Solution 1: Store the elements in the vector array. Start putting element in the hash map. We can check if differce of 
            Target and current node exist in the hash map.
            If difference exist, then return true else put the current node value in the hash map ans move to left or 
            right child node.
*/


class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        vector<int> buffer;
        unordered_map<int, int> map;
        storeBuffer(root, buffer);
        for(int i = 0 ; i < buffer.size() ; i++){
            int tofind = k - buffer[i];
            if(map.find(tofind) != map.end()){
                return true;
            }
            map[buffer[i]] = i;
        }
        return false;
    }
    
    void storeBuffer(TreeNode* root, vector<int> &buffer){
        if(!root) return;
        storeBuffer(root->left, buffer);
        buffer.push_back(root->val);
        storeBuffer(root->right, buffer); 
    }
};



/*
Solution 2: Withput using additional array, we can check if differce of Targer and current node exist in the hash map.
             If difference exist, then return true else put the current node value in the hash map ans move to left or 
             right child node. Will require O(n) time ans O(n) space
*/

class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        unordered_set<int> hash_map;
        return helper(root, hash_map, k);
    }
    
    bool helper(TreeNode* root, unordered_set<int> &hash_map, int k){
        if(!root) return NULL;
        if(hash_map.find(k- root->val) != hash_map.end()) return true;
        else{
            hash_map.insert(root->val);
        }
        return (helper(root->left, hash_map, k) || helper(root->right, hash_map, k));
    }
};
