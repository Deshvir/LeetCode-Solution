/**
* Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by 
* level from leaf to root).

* For example:
* Given binary tree [3,9,20,null,null,15,7],
*     3
*    / \
*   9  20
*     /  \
*    15   7
* return its bottom-up level order traversal as:
* [
*   [15,7],
*   [9,20],
*   [3]
* ]
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
//Solution : USing DFS 
 
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        if(!root) return vector<vector<int>> ();
        vector<vector<int>> result;
        queue<TreeNode*> nodeQ;
        nodeQ.push(root);
        while(!nodeQ.empty()){
            int size = nodeQ.size();
            vector<int> row(size);
            for(int i = 0; i < size ;i++){
                TreeNode* node = nodeQ.front();
                nodeQ.pop();
                row[i] = node->val;
                if(node->left) nodeQ.push(node->left);
                if(node->right) nodeQ.push(node->right); 
            }
            result.push_back(row);
        }        
        reverse(result.begin(), result.end());
        return result;
    }
};
